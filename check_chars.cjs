const fs = require("fs");
const path = require("path");

// –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
const filePath = path.join(__dirname, "src/app/data/level3-texts.json");
const data = JSON.parse(fs.readFileSync(filePath, "utf8"));

console.log("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤ level3-texts.json\n");

data.forEach((item, index) => {
  const text = item.text;
  console.log(`=== –¢–µ–∫—Å—Ç ${index + 1} ===`);
  console.log(`–î–ª–∏–Ω–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const problematicChars = [];
  const charCounts = {};

  for (let i = 0; i < text.length; i++) {
    const char = text[i];
    const charCode = char.charCodeAt(0);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    charCounts[char] = (charCounts[char] || 0) + 1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    let isProblematic = false;
    let reason = "";

    // –ù–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤)
    if (
      charCode < 32 &&
      char !== " " &&
      char !== "\n" &&
      char !== "\r" &&
      char !== "\t"
    ) {
      isProblematic = true;
      reason = "–Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª";
    }

    // –°–∏–º–≤–æ–ª—ã –≤–Ω–µ –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if (charCode > 127 && charCode < 160) {
      isProblematic = true;
      reason = "—Å–∏–º–≤–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 128-159";
    }

    // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –ø—Ä–æ–±–µ–ª–æ–≤
    if (charCode === 160) {
      // –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
      isProblematic = true;
      reason = "–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª (NBSP)";
    }

    if (charCode === 8203) {
      // zero-width space
      isProblematic = true;
      reason = "–Ω–µ–≤–∏–¥–∏–º—ã–π –ø—Ä–æ–±–µ–ª (zero-width space)";
    }

    // –î—Ä—É–≥–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (charCode >= 8204 && charCode <= 8207) {
      isProblematic = true;
      reason = "–Ω–µ–≤–∏–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–π —Å–∏–º–≤–æ–ª";
    }

    if (isProblematic) {
      problematicChars.push({
        char: char,
        position: i,
        charCode: charCode,
        reason: reason,
        context: text.substring(Math.max(0, i - 5), i + 6),
      });
    }
  }

  if (problematicChars.length > 0) {
    console.log(
      `‚ùå –ù–∞–π–¥–µ–Ω–æ ${problematicChars.length} –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:`,
    );
    problematicChars.forEach((item) => {
      console.log(
        `  - –ü–æ–∑–∏—Ü–∏—è ${item.position}: "${item.char}" (–∫–æ–¥: ${item.charCode}) - ${item.reason}`,
      );
      console.log(`    –ö–æ–Ω—Ç–µ–∫—Å—Ç: "${item.context}"`);
    });
  } else {
    console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const unusualChars = Object.entries(charCounts)
    .filter(([char, count]) => {
      const code = char.charCodeAt(0);
      return code > 127 || code < 32;
    })
    .sort((a, b) => b[1] - a[1]);

  if (unusualChars.length > 0) {
    console.log("\nüìä –ù–µ–æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ:");
    unusualChars.forEach(([char, count]) => {
      const code = char.charCodeAt(0);
      let description = char;
      if (code === 32) description = "–ø—Ä–æ–±–µ–ª";
      else if (code === 10) description = "–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏";
      else if (code === 13) description = "–≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏";
      else if (code === 9) description = "—Ç–∞–±—É–ª—è—Ü–∏—è";
      else if (code === 160) description = "–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª";

      console.log(`  "${description}" (–∫–æ–¥: ${code}) - ${count} —Ä–∞–∑`);
    });
  }

  console.log("");
});

console.log("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.");
